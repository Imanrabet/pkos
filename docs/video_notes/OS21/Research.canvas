{
	"nodes":[
		{"type":"group","id":"a74b9b8846b29dc1","x":-1120,"y":240,"width":1208,"height":1040,"color":"2","label":"Rust sidequest"},
		{"type":"file","file":"video_notes/OS21/Pasted image 20230623004406.png","id":"d95210af76c14f43","x":-1480,"y":-600,"width":995,"height":587},
		{"type":"text","text":"This is BIG!","id":"387bbce26b3511c1","x":-485,"y":-600,"width":250,"height":60},
		{"type":"text","text":"Using the table provided by Wikipedia, we found a real device that matches up with `info qtree` in qemu monitor!","id":"a33dc68bceb5bd58","x":-485,"y":-540,"width":456,"height":94},
		{"type":"text","text":"Sidequest: Is there anything we can do to make it easier to interact with strings?","id":"a59f74868bd7cdaa","x":-1480,"y":80,"width":515,"height":85},
		{"type":"text","text":"int to string WITHOUT passing buffer?","id":"87f424988a6aba43","x":-1480,"y":165,"width":300,"height":60},
		{"type":"text","text":"Rough printf impl?","id":"df87c13892d7b4c2","x":-1480,"y":225,"width":300,"height":60},
		{"type":"text","text":"Variable length args to print(ln)?","id":"be71f5472c6bde1b","x":-1480,"y":285,"width":300,"height":60},
		{"type":"text","text":"commit 5e0bdea9ee0a05b50fcebe094d54a35c84d66497","id":"b1b6138897d833ab","x":-485,"y":-446,"width":492,"height":64},
		{"type":"text","text":"Back to PCI","id":"f0f3a6b853e5a598","x":-1480,"y":1440,"width":250,"height":60},
		{"type":"file","file":"video_notes/OS21/Pasted image 20230623112728.png","id":"048dae18a7d8fd33","x":-1480,"y":1500,"width":400,"height":292},
		{"type":"text","text":"Starting to iterate. The ones that are \"pppp\" must just not exist","id":"9df3e528ee751a62","x":-1480,"y":1792,"width":400,"height":68},
		{"type":"file","file":"images/Pasted image 20230205212051.png","id":"f3ee5d946ea0659a","x":-1480,"y":1880,"width":400,"height":369},
		{"type":"text","text":"https://www.pcilookup.com/","id":"a04223dff7f9408d","x":-1480,"y":2249,"width":250,"height":60},
		{"type":"text","text":"https://www.pcilookup.com/?ven=8086&dev=7010&action=submit\nFound the one we want!\n","id":"89f86f1af4e32b6d","x":-1480,"y":2309,"width":437,"height":151},
		{"type":"text","text":"https://wiki.osdev.org/PCI_IDE_Controller\n> If the class code is 0x01 (Mass Storage Controller) and the subclass code is 0x01 (IDE), the device is an IDE controller.","id":"cc53fc6c07c98da5","x":-1440,"y":2480,"width":586,"height":146},
		{"type":"text","text":"EArly dump PCI devices Linux kernel:\nhttps://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/arch/x86/pci/early.c?id=refs/tags/v3.12.77\n\nNotice: \n```c\nif (class == 0xffffffff)\n\tcontinue;\n```","id":"632fa37a9eedfd1d","x":-1480,"y":2660,"width":578,"height":227},
		{"type":"text","text":"Commit 548ddd3bb4c9733046bd0df0a536af1879f76fd5\nImprove lspci method","id":"e63e333a0f535c1e","x":-1465,"y":2919,"width":563,"height":101},
		{"type":"text","text":"Specs not available online - Requires membership in PCI-SIG. However, found the 2004 spec of the memory space:\nhttps://lekensteyn.nl/files/docs/PCI_SPEV_V3_0.pdf","id":"2291816ce1fdd6bd","x":-1467,"y":3040,"width":568,"height":92},
		{"type":"text","text":"ChatGPT convo\nhttps://chat.openai.com/share/5ff8ea92-48e5-4ef3-9070-848aba2543e6","id":"18ace3278e0da7cc","x":-1100,"y":428,"width":709,"height":52},
		{"type":"text","text":"rustup target add i686-unknown-linux-gnu","id":"8f2854fe014c9f18","x":-1100,"y":480,"width":384,"height":61},
		{"type":"text","text":"Bare metal Rust 32-bit:\nhttps://stackoverflow.com/questions/67902309/how-to-compile-rust-code-to-bare-metal-32-bit-x86-i686-code-what-compile-targ","id":"e07e3e1536f577a5","x":-1100,"y":580,"width":1168,"height":86},
		{"type":"text","text":"Commit\n5ea840a951faad8c9de33447fec0c9179eb1f8ed","id":"3627aeff55cd0f11","x":-1100,"y":666,"width":1056,"height":60},
		{"type":"text","text":"Trying to get it to work...","id":"c770a72ff2aee1ba","x":-1100,"y":760,"width":250,"height":60},
		{"type":"text","text":"Moved everything up a dir, giving it a rest for now","id":"72d2bc822e7600b8","x":-1100,"y":820,"width":250,"height":60},
		{"type":"text","text":"Commit\n7cd861fb8245656783dfa576a21fa9f6550968cc","id":"225d3b602766a68b","x":-1100,"y":880,"width":454,"height":57},
		{"type":"text","text":"Potentially promising: Writing an OS in Rust\nhttps://os.phil-opp.com/set-up-rust/","id":"bec16869ef0bfc68","x":-1100,"y":980,"width":385,"height":60},
		{"type":"text","text":"Helpful tips:\n- setup as stdlib\n- xargo for cross-compile","id":"cb059001dfcdf3d4","x":-1100,"y":1040,"width":340,"height":120},
		{"type":"text","text":"Latest version:\nhttps://os.phil-opp.com/freestanding-rust-binary/","id":"f6e23d42f45af15f","x":-1100,"y":1200,"width":446,"height":60},
		{"type":"text","text":"How hard would it be to add rust?","id":"94d6f3e9f030abd7","x":-1100,"y":260,"width":250,"height":60},
		{"type":"text","text":"Page 217:\n> The Class Code register is read-only and is used to identify the generic function of the device and, in some cases, a specific registerlevel programming interface. The register is broken into three bytesize fields. The upper byte (at offset 0Bh) is a base class code which broadly classifies the type of function the device performs. The middle byte (at offset 0Ah) is a sub-class code which identifies more specifically the function of the device. The lower byte (at offset 09h) identifies a specific register-level programming interface (if any) so that device independent software can interact with the device. Encodings for base class, sub-class, and programming interface are provided in Appendix D. All unspecified encodings are reserved.","id":"3185500524ae9282","x":-1465,"y":3132,"width":1155,"height":228},
		{"type":"text","text":"Commit 1b1db4b\nAdd code to detect base class, subclass","id":"259a8dcfaafc12a5","x":-1467,"y":3360,"width":408,"height":60},
		{"type":"text","text":"Update printchar driver\nOtherwise it overwrites memory if you print too many things.\nNow it just wraps around\n```c\n\tif (cursor_row >= ROWS) {\n\t\tcursor_row = cursor_row % ROWS;\n\t\t// clear the row before we print\n\t\tfor (int i = 0; i < COLS; i++) {\n\t\t\tprintchar_at(' ', cursor_row, i);\n\t\t}\n\t}\n```","id":"8e391a3f79b2360a","x":-1492,"y":3445,"width":872,"height":315},
		{"type":"text","text":"Commit 38bee3f","id":"e550701b987d9856","x":-1492,"y":3760,"width":250,"height":60},
		{"type":"text","text":"066e459 Clean up itoa funcs to use single buffer","id":"a9837dc591d8e0c0","x":-1492,"y":3860,"width":432,"height":66},
		{"type":"text","text":"PCI IDE Spec:\nhttp://www.isdaman.com/alsos/hardware/hdc/pciide.pdf","id":"f9afa3134f133e32","x":-1492,"y":3980,"width":540,"height":60},
		{"type":"file","file":"video_notes/OS21/Pasted image 20230623133813.png","id":"3f61530f2934bb96","x":-1492,"y":4040,"width":399,"height":213},
		{"type":"text","text":"Definition for IDE chip:\nhttps://pdf.dzsc.com/PC8/PC87410.pdf\nLines up with what we saw","id":"ebbdaa6c434a928c","x":-1492,"y":4280,"width":532,"height":97},
		{"type":"text","text":"Writing IDE controller (BSP?)\nhttps://docs.rtems.org/branches/master/bsp-howto/ide_controller.html","id":"a160e9fdcf83b178","x":-1492,"y":4420,"width":632,"height":80},
		{"type":"text","text":"Source code: https://github.com/RTEMS/rtems/tree/master/bsps/shared/dev/ide","id":"a0fcc00fa0866e55","x":-1492,"y":4500,"width":605,"height":81},
		{"type":"text","text":"ATA driver: https://docs.rtems.org/branches/master/bsp-howto/ata.html","id":"9aec9b8678ba742a","x":-1492,"y":4581,"width":683,"height":58},
		{"type":"text","text":"osdev simple ATA driver:\nhttps://github.com/levex/osdev/blob/master/drivers/ata.c","id":"206d9a667ba40dad","x":-1492,"y":4660,"width":476,"height":58},
		{"type":"text","text":"Add SATA drive to qemu:\nhttps://stackoverflow.com/questions/48351096/how-to-emulate-a-sata-disk-drive-in-qemu","id":"7318473c22ddc1c2","x":-1492,"y":4760,"width":822,"height":79},
		{"type":"text","text":"SATA on QEMU:\nhttps://rubenerd.com/sata-on-qemu/","id":"0790aee6393d667b","x":-1492,"y":4860,"width":391,"height":73}
	],
	"edges":[]
}